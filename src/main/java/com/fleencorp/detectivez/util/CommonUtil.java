package com.fleencorp.detectivez.util;

import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.function.Supplier;

import static java.util.Objects.isNull;
import static java.util.Objects.nonNull;

public class CommonUtil {

  public static String nullToEmpty(final String value) {
    return value != null ? value : "";
  }

  /**
   * Checks whether the provided URL string is valid and points to a recognizable host.
   *
   * <p>The method first ensures the URL is not null, blank, or missing the expected scheme.
   * It then attempts to parse the URL using {@link URI} and {@link URL}.</p>
   *
   * <p>Returns {@code false} if the URL is malformed, has no host, or fails validation.</p>
   *
   * @param url the URL string to validate
   * @return {@code true} if the URL is valid and has a non-blank host; {@code false} otherwise
   */
  public static boolean isValidUrl(final String url) {
    if (url == null || url.isBlank() || !url.startsWith("http") || !url.startsWith("https")) {
      return false;
    }

    try {
      final URI uri = URI.create(url);
      final URL parsed = URL.of(uri, null);

      return parsed.getHost() != null && !parsed.getHost().isBlank();
    } catch (final Exception _) {
      return false;
    }
  }

  /**
   * Validates and sanitizes the input URL string.
   *
   * <p>If the input is null or blank, an empty string is returned. Otherwise, the method ensures the URL
   * has a proper protocol (defaults to HTTPS if missing), validates its format, and returns a normalized
   * version stripped of protocol and 'www.' prefix if present.</p>
   *
   * <p>Invalid or malformed URLs result in an empty string.</p>
   *
   * @param urlString the URL string to validate and sanitize
   * @return a cleaned URL string without protocol and 'www.', or an empty string if invalid
   */
  public static String validateAndSanitizeUrl(String urlString) {
    if (urlString == null || urlString.trim().isEmpty()) {
      return ""; // Handle null or empty input
    }

    // Trim whitespace
    urlString = urlString.trim();

    // Add default protocol if none is specified
    String normalizedUrl = urlString;
    if (!urlString.matches("^[a-zA-Z][a-zA-Z0-9+.-]*:.*")) {
      normalizedUrl = "https://" + urlString;
    }

    try {
      // Validate URL format using URI and convert to URL
      final URI uri = new URI(normalizedUrl);
      uri.toURL(); // Ensure it's a valid URL

      // Get the normalized string representation
      String sanitized = uri.normalize().toString();

      // Remove protocol (http://, https://)
      sanitized = sanitized.replaceFirst("^(https?://)", "");

      // Remove www. if present
      sanitized = sanitized.replaceFirst("^www\\.", "");

      return sanitized;
    } catch (final URISyntaxException | MalformedURLException e) {
      return ""; // Return empty string for invalid URLs
    }
  }

  /**
   * Validates that the provided value is not null. If the value is null and the exception supplier is not null,
   * the exception generated by the supplier is thrown. This utility is commonly used to enforce non-null requirements
   * while allowing flexible exception handling logic.
   *
   * @param value the value to check for nullity
   * @param exception the supplier that provides the exception to be thrown if the value is null
   * @param <T> the type of the value being checked
   * @throws RuntimeException if the value is null and a non-null exception supplier is provided
   */
  public static <T> void checkNotNull(final T value, final Supplier<? extends RuntimeException> exception) {
    // Check if the exception supplier is non-null and the value is null
    if (nonNull(exception) && isNull(value)) {
      // Throw the exception provided by the supplier
      throw exception.get();
    }
  }
}
